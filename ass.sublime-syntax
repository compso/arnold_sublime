%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Arnold ASS file 
file_extensions:
  - ass
scope: source.ass

variables:
  special_chars: '[;{}\[\]"\\]'
  unquoted_string: '[^\s{{special_chars}}][^\s${{special_chars}}]*'
  end_chars: '[;\n\}\]]'
  inline_end_chars: '[;\s\}\]\\]'
  var_unquoted_string: '(?:\$\{[^ \}]+\}|{{unquoted_string}})+'
  _type_bool: |- # http://yaml.org/type/bool.html
      \b(y|Y|yes|Yes|YES|n|N|no|No|NO
        |true|True|TRUE|false|False|FALSE
        |on|On|ON|off|Off|OFF)\b
  _var_types: |-
      \b(FLOAT|INT|STRING|ARRAY|NODE|BYTE|UINT|VECTOR|VECTOR2
         |b85INT|b85UINT|b85VECTOR|b85VECTOR2)\b

contexts:
  main:
    - include: comment
    - include: commands

  commands:
    - match: ^(?=\s*[^\[\{])
      push: command-name
    # - include: expressions

  continued-line:
    - match: (?={{end_chars}})
      pop: true
    - match: '^(?=\s*#)'
      push:
        - match: '#'
          scope: comment.line.number-sign.ass punctuation.definition.comment.ass
          set:
            - meta_content_scope: comment.line.number-sign.ass
            - match: \n
              pop: true
            - match: \\\\
            - match: \\\n
              scope: punctuation.separator.continuation.ass

  expressions:
    - match: \\(?=\n)
      scope: punctuation.separator.continuation.ass
      push:
        - match: \n
        - match: (?=\S)
          set: continued-line
    - include: braces

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.ass
      push:
        - meta_scope: string.quoted.double.ass
        - match: \\\n
          scope: constant.character.escape.double-quoted.newline.ass
        - match: '"'
          scope: punctuation.definition.string.end.ass
          pop: true
    #     - match: \\(?=\n)
    #       scope: punctuation.separator.continuation.ass
    #       push:
    #         - match: \n
    #         - match: (?=\S)
    #           pop: true
    #     - match: ({{}})
    #     - include: escape
    #     - include: variable
    # - match: '{{unquoted_string}}'

  numbers:
    - match: \b0x\h*\b
      scope: constant.numeric.integer.ass
    - match: \b0b[01]*\b
      scope: constant.numeric.integer.ass
    - match: \b0o[0-7]*\b
      scope: constant.numeric.integer.ass
    - match: -?\b[0-9]+\.[0-9]+\b
      scope: constant.numeric.float.ass
    - match: -?\b[0-9e-]+\.[0-9e-]+\b
      scope: constant.numeric.float.ass
    - match: -?\b[0-9]+\b
      scope: constant.numeric.integer.ass

  command-name:
    - match: '(?=[a-zA-Z0-9_]+)'
      set: node
    - include: comment

  comment:
    - match: |
        (?x)
        (?: ^ [ \t]* | [ \t]+ )
        (?=\#)
      captures:
      push:
        - match: '#'
          scope: punctuation.definition.comment.line.number-sign.ass
          set:
          - meta_scope: comment.line.number-sign.ass
          - match: \n|\z
            pop: true

  node:
    - match: '^[a-zA-Z0-9_]+\s*\n'
      scope: entity.name.function.ass
    - include: comment
    - include: operators
    - include: bool
    - include: numbers
    - include: strings
    - include: node_variable

  node_variable:
    - include: numbers
    - match: '^\s*([a-zA-Z_\.]+)\s'
      scope: variable.parameter.ass
    - include: variable_value

  variable_value:
    - match: '(([/a-zA-Z0-9_]+)([@/a-zA-Z0-9_\.:]+))+'
      scope: variable.function.ass

  bool:
    - match: |
        {{_type_bool}}
      scope: constant.language.boolean.yaml

  operators:
    - match: '\b(declare|constant)\b'
      scope: keyword.operator.ass
    - include: types 

  types:
    - match: '\b(FLOAT|INT|STRING|ARRAY|NODE|BYTE|UINT|VECTOR|VECTOR2|b85UINT|b85VECTOR|b85VECTOR2)\b'
      scope: variable.function.ass  

  braces:
    - match: (\{)(\*)(\})
      scope: meta.block.ass
      captures:
        1: punctuation.definition.block.begin.ass
        2: keyword.operator.ass
        3: punctuation.definition.block.end.ass
    - match: '\{'
      scope: punctuation.definition.block.begin.ass
      push:
        - meta_scope: meta.block.ass
        - match: '(\})'
          captures:
            1: punctuation.definition.block.end.ass
            2: invalid.illegal.ass
          pop: true
        - match: '\\[\\{}n]'
          scope: constant.character.escape.ass
        - include: commands

  substitution:
    - match: '\[(?!{{special_chars}})'
      scope: punctuation.definition.substitution.begin.ass
      push: [substitution-body, command-name]

  substitution-body:
    - meta_scope: meta.substitution.ass
    - match: '\]'
      scope: meta.substitution.ass punctuation.definition.substitution.end.ass
      pop: true
    - include: commands

  escape:
    - match: '\\(\d{1,3}|x\h+|u\h{1,4}|.|n)'
      scope: constant.character.escape.ass

  variable:
    - match: '(\$)((?:[a-zA-Z0-9_]|::)+(\([^\)]+\))?|\{[^\}]*\})'
      scope: variable.other.ass
      captures:
        1: punctuation.definition.variable.ass